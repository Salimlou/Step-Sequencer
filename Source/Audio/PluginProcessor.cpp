/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
PluginTemplate1AudioProcessor::PluginTemplate1AudioProcessor()
{
}

PluginTemplate1AudioProcessor::~PluginTemplate1AudioProcessor()
{
}

//==============================================================================
const String PluginTemplate1AudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int PluginTemplate1AudioProcessor::getNumParameters()
{
    return 0;
}

float PluginTemplate1AudioProcessor::getParameter (int index)
{
    return 0.0f;
}

void PluginTemplate1AudioProcessor::setParameter (int index, float newValue)
{
}

const String PluginTemplate1AudioProcessor::getParameterName (int index)
{
    return String::empty;
}

const String PluginTemplate1AudioProcessor::getParameterText (int index)
{
    return String::empty;
}

const String PluginTemplate1AudioProcessor::getInputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PluginTemplate1AudioProcessor::getOutputChannelName (const int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PluginTemplate1AudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool PluginTemplate1AudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool PluginTemplate1AudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool PluginTemplate1AudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

int PluginTemplate1AudioProcessor::getNumPrograms()
{
    return 0;
}

int PluginTemplate1AudioProcessor::getCurrentProgram()
{
    return 0;
}

void PluginTemplate1AudioProcessor::setCurrentProgram (int index)
{
}

const String PluginTemplate1AudioProcessor::getProgramName (int index)
{
    return String::empty;
}

void PluginTemplate1AudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PluginTemplate1AudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void PluginTemplate1AudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void PluginTemplate1AudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getSampleData (channel);

        // ..do something to the data...
    }

    // In case we have more outputs than inputs, we'll clear any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
    {
        buffer.clear (i, 0, buffer.getNumSamples());
    }
}

//==============================================================================
AudioProcessorEditor* PluginTemplate1AudioProcessor::createEditor()
{
    return new PluginTemplate1AudioProcessorEditor (this);
}

//==============================================================================
void PluginTemplate1AudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void PluginTemplate1AudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PluginTemplate1AudioProcessor();
}
